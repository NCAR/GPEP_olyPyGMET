# Some default settings

########################################################################################################################
# general settings
########################################################################################################################

# master seed: control all probabilistic process (e.g., probabilistic estimation, machine learning methods)
# a negative value means random generation without reproducibility
master_seed = 20230104

########################################################################################################################
# settings for gridded estimation using regression or machine learning methods
########################################################################################################################


############################## static predictors for regression
# predictors used in regression. Station and grid variable names should be unified in the future.
predictor_name_static_stn = ['lat', 'lon', 'elev', 'slp_n', 'slp_e'] # variable names in station attribute file
predictor_name_static_grid = ['latitude', 'longitude', 'elev', 'gradient_n_s', 'gradient_w_e'] # variable names in station attribute file

############################## dynamic predictors for regression

# dynamic predictors needs some processing, such as
# interpolation from dynamic grids to target grids and station points
#     Keyword "interp" accepts {"linear", "nearest", "zero", "slinear", "quadratic", "cubic", "polynomial"} enabled by xarray.interp.
# transformation of the raw dynamic predictor
#     Keyword "transform" accepts methods defined in the transformation section
# Example "cube_root_prec_rate:interp=linear:transform=boxcox"
dynamic_predictor_operation = []


########################################################################################################################
# default settings
# they are as useful as the above settings but using their default values does not affect model run for any case
########################################################################################################################

# gridding methods: locally weighted regression and meachine learning methods.
# Sklearn module is used to support most functions: https://scikit-learn.org/stable/supervised_learning.html
# Locally weighted regression.
#   Two original methods are LWR:Linear and LWR:Logistic.
#   Sklearn-based methods support simple usage with "model.fit()" and "model.predict" or "model.predict_prob", in the format of LWR:linear_model.METHOD
#   Examples of METHOD are LinearRegression, LogisticRegression, Ridge, BayesianRidge, ARDRegression, Lasso, ElasticNet, Lars, etc
# Global regression using machine learnig methods:
#   Machine learning methods are supported by sklearn. Parametrs of methods supported by sklearn can be defined at the bottom of this configuration file (optional)
#   Examples: ensemble.RandomForestRegressor, ensemble.RandomForestClassifier, neural_network.MLPRegressor, neural_network.MLPClassifier, ensemble.GradientBoostingClassifier, ensemble.GradientBoostingRegressor
# The parameters of sklearn methods can be defined in the [sklearn] section
gridcore_continuous = 'LWR:Linear'
gridcore_classification = 'LWR:Logistic' # for probability of precipitation
n_splits = 10 # only useful for machine learning methods. cross validation to generate uncertainty estimates.

# Number of stations to consider for each target point. nearstn_min<=nearstn_max.
nearstn_min = 35  # nearby stations: minimum number
nearstn_max = 35  # nearby stations: maximum number

# first try this radius (km). if not enough, expand. Could be useful to reduce computation time for large domain search.
try_radius = 10000

# direct: using raw time series to calculate autocorrelation; anomaly: using the anomaly of time series to calculate autocorrelation
auto_corr_method = 'direct'
# only effective for auto_corr_method=anomaly. rolling mean window size, which is used for variable lag auto correlation calculation
rolling_window = 31 # 31-monthly rolling mean to remove monthly cycle

# overwrite existing files
overwrite_stninfo = false
overwrite_station_cc = false
overwrite_weight = false
overwrite_loo_reg = false
overwrite_grid_reg = false
overwrite_ens = false
overwrite_spcorr = false


########################################################################################################################
# distance-based weight calculation
########################################################################################################################

initial_distance = 100 # Initial Search Distance in km (expanded if need be)

# Weight calculation formula. Only two variables/parameters are allowed in the formula
# dist: distance between points (km in the script)
# maxdist (optional): max(initial_distance, max(dist)+1), which is a parameter used in weight calculation
# 3 is the exponential factor and is the default parameter
weight_formula = '(1 - (dist / maxdist) ** 3) ** 3'


########################################################################################################################
# method-related settings
# default values can be directly used
########################################################################################################################

[transform]
# note: the name must be consistent with transform_vars
[transform.boxcox]
exp = 4

[sklearn]
# if no parameters are provided or if the section does not even exist, default parameters will be used.
# just provide the method name, no need to include the submodule name
[sklearn.RandomForestRegressor]
n_estimators = 500 # a example of RandomForestRegressor parameter
n_jobs = 5
[sklearn.RandomForestClassifier]
n_estimators = 500 # a example of RandomForestRegressor parameter
n_jobs = 5